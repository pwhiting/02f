#!/usr/bin/perl
use XML::LibXML::Simple   qw(XMLin);
use Data::Dumper::Concise;
use JSON::MaybeXS ();
use Forge;
use Rules;

foreach my $file (@ARGV) {
  warn "processing $file\n";
  my $json = JSON::MaybeXS->new(utf8 => 1, pretty => 1, sort_by => 1);
  my $config = XMLin($file,ForceArray => ['rule']);
  my $policies=$config->{application}->{policy};
#  $policies->{default}={};
  my $default_auth=$config->{application}->{authorization}->{default}->{headers};
  my $filters=Rules::MakeFilters $config->{application}->{authorization}->{rule};
  foreach $policy_name (keys $policies) {
    next if $policy_name=~/ /;
    print "$policy_name\n";
    my $policy=$policies->{$policy_name}; # contains the hash ref
    my $name=$config->{application}->{authHost};
    my $environment=$config->{environment}->{id};
    my $policy_sn=$policy_name=~s/\{.*//r; #short name
    #my $filter=$policy->{authorization}->{value};
    #print Dumper($filter);
    my $filter=$filters->{$policy->{authorization}->{value}};
    print "$filter\n";
    $policy_sn="" if $policy_sn eq "default";
    my $jconfig = {
      active              => "true",
      description         => "",
      subject             => "",
      applicationName     => "iPlanetAMWebAgentService",
      resourceTypeUuid    => "feb3490d-5f5e-4413-ace8-b76ad5bdf172",
      name                => Forge::Name($environment,$name,$policy_sn),
      resources           => Forge::Resources($name,$policy_sn),
      subject             => Forge::Subject(0), # allow anon
      condition           => Forge::Condition(200,$filter),
      actionValues        => Forge::ActionValues($policy),
      resourceAttributes  => Forge::ResourceAttributes($policy,$default_auth),
    };
    open my $fh,">","json/".Forge::Name($environment,$name,$policy_sn).".json";
    print $fh $json->encode($jconfig);
    close $fh;
  }
}
