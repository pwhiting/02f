#!/usr/bin/perl
use OracleXML;
use Policy;
use strict;
use Data::Dumper::Concise;

use JSON::MaybeXS ();
use Hash::Ordered;

my $json = JSON::MaybeXS->new(utf8 => 1, pretty => 1, sort_by => 1);



my $merged_policies={};
foreach my $file (@ARGV) {
  warn "processing $file\n";
  my $oracle=OracleXML->new($file);
  foreach my $policy (@{$oracle->GetPolicies}) {
    my $filter=$policy->Filter;
    if(not defined $merged_policies->{$filter}) {
        $merged_policies->{$filter}=$policy;
    } else {
       $merged_policies->{$filter}->Merge($policy);
    }
  }
}


foreach my $name (keys $merged_policies) {
  my $policy=$merged_policies->{$name};
  if($policy->Scheme eq "anonymous") {
    print STDERR "Not building JSON for anonymous on the following resources:\n\t";
    print STDERR join("\n\t",sort(@{$policy->Resources}));
    print STDERR "\n\n";
    next;
  }

#my $jconfig = {
tie my %jconfig, 'Hash::Ordered',
    (
    active              => JSON::MaybeXS::true,
    description         => "AutoGenerated Allow Policy",
    applicationName     => "iPlanetAMWebAgentService",
    resourceTypeUuid    => "feb3490d-5f5e-4413-ace8-b76ad5bdf172",
    name                => $policy->FilterName,
    resources           => [sort(@{$policy->Resources})],
    subject             => $policy->Subjects,
    condition           => $policy->Conditions,
    actionValues        => $policy->ActionValues(JSON::MaybeXS::true),
    resourceAttributes  => $policy->ResourceAttributes,
  );
  print $json->encode(\%jconfig);

  tie my %jconfig, 'Hash::Ordered',
      (
      active              => JSON::MaybeXS::true,
      description         => "AutoGenerated Deny Policy",
      applicationName     => "iPlanetAMWebAgentService",
      resourceTypeUuid    => "feb3490d-5f5e-4413-ace8-b76ad5bdf172",
      name                => $policy->FilterName,
      resources           => [sort(@{$policy->Resources})],
      subject             => $policy->Subjects,
      condition           => $policy->Conditions(invert=>1),
      actionValues        => $policy->ActionValues(JSON::MaybeXS::false),
      resourceAttributes  => $policy->ResourceAttributes,
    );
    print $json->encode(\%jconfig);

}
