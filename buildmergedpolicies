#!/usr/bin/perl
use OracleXML;
use Policy;
use strict;
use Data::Dumper::Concise;
use JSON::PP;



# the block below can be simplified to just the single line creating
# the json object. However, I've included it to make the output JSON
# easier to read, as it is all in the expected order.
my $json = JSON::PP->new->ascii->pretty->allow_nonref;
my %order = (
active              => 1,
description         => 2,
applicationName     => 3,
resourceTypeUuid    => 4,
name                => 5,
resources           => 6,
subject             => 7,
condition           => 8,
actionValues        => 9,
resourceAttributes  => 10,
type                => 11,
subjects            => 12,
subject             => 13,
authlevel           => 14,
ldapFilter          => 15,
conditions          => 16
);
$json->sort_by(sub {
    ($order{$JSON::PP::a} // 20) <=> ($order{$JSON::PP::b} // 20)
    or $JSON::PP::a cmp $JSON::PP::b
});

# read in every file and merge policies which have the same LDAP filter
my $merged_policies={};
foreach my $file (@ARGV) {
  warn "processing $file\n";
  my $oracle=OracleXML->new($file);
  foreach my $policy (@{$oracle->GetPolicies}) {
    my $filter=$policy->Filter;
    if(not defined $merged_policies->{$filter}) {
        $merged_policies->{$filter}=$policy;
    } else {
       $merged_policies->{$filter}->Merge($policy);
    }
  }
}

# print the policy block for every merged policy
foreach my $name (keys $merged_policies) {
  my $policy=$merged_policies->{$name};
  if($policy->Scheme eq "anonymous" && 0) {
    print STDERR "Not building JSON for anonymous on the following resources:\n\t";
    print STDERR join("\n\t",sort(@{$policy->Resources}));
    print STDERR "\n\n";
    next;
  }

  my $jconfig = {
    active              => JSON::MaybeXS::true,
    description         => "AutoGenerated Allow Policy",
    applicationName     => "iPlanetAMWebAgentService",
    resourceTypeUuid    => "feb3490d-5f5e-4413-ace8-b76ad5bdf172",
    name                => $policy->FilterName,
    resources           => [sort(@{$policy->Resources})],
    subject             => $policy->Subjects,
    condition           => $policy->Conditions,
    actionValues        => $policy->ActionValues,
    resourceAttributes  => $policy->ResourceAttributes,
  };
  print $json->encode($jconfig);

  # the deny policy is almost the same, just invert the ldap filter
  $jconfig->{description}="AutoGenerated Deny Policy";
  $jconfig->{condition}=$policy->Conditions(invert=>1);
  $jconfig->{actionValues}=$policy->ActionValues(invert=>1);
  $jconfig->{name}= $policy->FilterName(invert=>1);

  print $json->encode($jconfig);

}
